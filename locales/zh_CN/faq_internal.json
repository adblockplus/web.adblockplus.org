{
  "s1": {
    "message": "我该如何了解 Adblock Plus 所有首选项的含义？"
  },
  "s11": {
    "message": "　　对于开发人员来说，要注册一个内容策略，您编写的 <a>XPCOM 组件</a>需要实现 <a>nsIContentPolicy 接口</a>。通过模块的 registerSelf 方法在\"内容策略\"分类中注册您的组件（使用 <a>category manager</a> 来实现）。然后，您就可以通过调用 shouldLoad 方法来决定是否接受指定的请求。"
  },
  "s11-link": {
    "message": "http://developer.mozilla.org/cn/docs/How_to_Build_an_XPCOM_Component_in_Javascript"
  },
  "s12": {
    "message": "Adblock Plus 是怎么处理过滤规则的，什么样的规则处理得更快？"
  },
  "s13": {
    "message": "所有的过滤规则都会在内部转换为<a>正则表达式</a>，包括那些简单规则。例如，<code>ad*banner.gif|</code> 会被转换为 <code>/ad.*banner\\.gif$/</code>。Adblock Plus 在处理给定地址时需要校验所有过滤规则，但此时它并不会简单地一条接着一条校验，因为这无疑会拖慢浏览速度。"
  },
  "s14": {
    "message": "　　除了转换过滤规则为正则表达式之外，Adblock Plus 还会尝试提取其中的文本信息得到唯一一个 8 字符的字符串（称为\"快捷方式，shortcut\"）。该字符串必须包含在每个匹配过滤规则的地址中（其实字符串长度可以是任意的，只是这里 8 字符最合理）。举例来说，对于过滤规则 <code>|http://ad.*</code>，Adblock Plus 可以选择 \"http://a\"、\"ttp://ad\" 或是 \"tp://ad.\"，这些字符串都包含在这条规则匹配的地址中。可惜的是目前我们还无法为不满足连续 8 个字符（不含通配符）的简单规则和正则表达式指定“快捷方式”。"
  },
  "s15": {
    "message": "　　所有快捷方式都存放在一个可查找的表中，Adblock Plus 可以通过快捷方式非常高效地查找到相应的规则。Adblock Plus 处理指定的地址时首先会查找这个表（查找速度非常快，几乎和快捷方式的数量无关）。只有匹配到快捷方式后才会应用相应的规则。处理没有快捷方式的规则（称为\"慢速规则\"）时，则需要对所有过滤规则一条一条地匹配。"
  },
  "s16": {
    "message": "　　总结： 什么样的过滤规则处理速度更快？尽量少使用处理速度较慢的正则表达式，同时保证简单规则至少包含 8 个连续字符（这里所说的\"连续\"是指不含 * 这样的特殊字符），否则等同于处理速度较慢的正则表达式。但只要简单规则符合要求，其处理时间都是一样的，与规则数量多少无关。这意味着就算您用 20 条简单规则代替一条正则表达式都是值得的。说到这里，建议使用这个<a>小工具</a>转换正则表达式为简单规则。"
  },
  "s17": {
    "message": "点击这里查阅详细的过滤规则匹配算法"
  },
  "s18": {
    "message": "元素隐藏功能是怎么实现的？"
  },
  "s20": {
    "message": "元素隐藏规则会被转换为 <a>CSS</a> 并应用到所有用户正在访问的网页。像是 <code>example.com#div(evil_ad)</code> 这条规则会被转换为："
  },
  "s22": {
    "message": "@-moz-document 是一个 CSS 标准的推荐扩展规则，您可以查阅 <a>Mozilla 开发者中心</a>。"
  },
  "s22-link": {
    "message": "https://developer.mozilla.org/en/CSS/@-moz-document"
  },
  "s23": {
    "message": "对于那些没有指定域名的规则会按照 http:// 和 https:// 进行处理，防止这些规则应用到浏览器的用户界面（它使用的是 chrome:// 协议模型）。例如，<code>#div(evil_ad)</code> 这条规则会被转换为："
  },
  "s26": {
    "message": "对于开发人员来说， Adblock Plus 使用的是<a>这个</a>样式表服务实现元素隐藏功能。这个接口是在 Gecko 1.8 时引入的，它允许扩展动态加载用户自定义 CSS（在此之前只能通过修改 userContent.css 并重启浏览器才能生效）。用户自定义 CSS 会覆盖所有网站的 CSS 代码，因为它具有最高的<a>优先级</a>。"
  },
  "s27": {
    "message": "过滤规则文件的第一行表示什么？"
  },
  "s28": {
    "message": "过滤规则文件的第一行通常都是 <code>[Adblock]</code>。但您可能发现在最近版本的 Adblock Plus 中过滤文件第一行有时显示为其他文字，这是由于您列表中部分过滤规则的语法只支持新版本 Adblock Plus 而不支持早期的 Adblock。例如："
  },
  "s29": {
    "message": "这里括号中的内容只是一个注释，Adblock 或 Adblock Plus 读取时会忽略实际标记之前的任何内容。由于 Adblock Plus 0.6.1.2 还不支持这种写法，因此这里 Adblock Plus 不会强制要求用户更新到新版本。然而，如果您使用更加新的过滤规则语法，则第一行有可能会变成："
  },
  "s3": {
    "description": "{1}: extensions.adblockplus., {2}: adblock.",
    "message": "Adblock Plus 在 <a>about:config</a> 中包含一系列以 <code>{1}</code> 打头的首选项。（这有别于 Adblock 和 Adblock Plus 0.5 的首选项以 <code>{2}</code> 打头）。 所有的首选项及其解释可以在<a>这里</a>查阅。"
  },
  "s30": {
    "message": "上面这种写法是从 Adblock Plus 0.7.1 开始支持的，而之前版本的 Adblock Plus 以及 Adblock 则无法打开这种文件。Adblock Plus 会将文件第一行的版本号和扩展自身版本号进行比较，如果文件要求的版本号高于扩展当前版本号，则 Adblock Plus 会提示用户更新到新版本。对于过滤规则订阅，它仍会加载这个文件，但会在首选项对话框显示扩展更新提示。"
  },
  "s31": {
    "message": "最后，如果只想兼容 Adblock Plus 但不在乎其版本号，您可以将文件第一行修改为 <code>[Adblock Plus]</code>。当然这样的过滤规则文件只支持 Adblock Plus 0.7.1 及更高版本。"
  },
  "s4": {
    "message": "我该如何让我的扩展接入 Adblock Plus？"
  },
  "s5": {
    "description": "{1}: IAdblockPlus",
    "message": "通过 <code>{1}</code> 接口的输出，其他扩展可以集成到 Adblock Plus。详情请参阅<a>接口文档</a>。"
  },
  "s6": {
    "message": "Adblock Plus 是怎么过滤地址的？"
  },
  "s7": {
    "message": "　　实际上最难的事情是由 Firefox、Thunderbird 及其他应用程序所基于的底层引擎 — Gecko 来完成的。它支持一种称为 \"内容策略（content policies）\"的机制。所谓的内容策略简单来说就是一个 JavaScript（或 C++）对象，浏览器一旦需要加载内容就必须调用它。此时它会根据地址和其他数据来判断是否加载这些内容。Gecko 引擎内置了一些内容策略（当你在 Firefox 或者 Seamonkey 中定义哪些站点不允许加载图片的时候，实际上就是配置了一个内置的内容策略），任何扩展都可以注册自己的内容策略。因此，Adblock Plus 要做的就是注册自己的内容策略，剩下的就只有定义哪些地址需要被阻挡的程序逻辑和配置过滤规则的用户界面了。"
  },
  "title": {
    "message": "常见问题 - Adblock Plus 内部详情"
  }
}